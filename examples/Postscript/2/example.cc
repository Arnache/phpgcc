/*
 * .example.cc
 *
 * version 1.0
 *
 * (this file was generated by a PHP script)
 *
 * description : swirling simply connected set
 * 
 * compilation : g++ -std=c++11 -Wall --pedantic-errors -I/usr/local/include -g0 -O3 example.cc -o example.linux.exe
 *
 */

#include <cmath>
#include <chrono>
#include <iostream>
#include <iomanip>
#include <string>
#include <sstream>
#include <fstream>
#include <getopt.h>

int Argc; char **Argv;
std::string filename; // name of the output image

int width; // witdh of the image, in pixels

int height; // height of the image, in pixels


std::stringstream ps; // string containing the file data
int bbLeft, bbRight, bbBottom, bbTop; // bounding box
#include <phpgcc/PSfuncs.cc>


std::string duration_string, total_duration_string;

std::string progName="example"; // used in clread.cc

const int paramNumber=3;

bool verbose;

void showVersion() {
  std::cout << "\nexample, version 1.0\n" << std::endl;
}


/*
 * Write duration in a friendly format
 */
std::string cct(std::chrono::high_resolution_clock::time_point timer1, std::chrono::high_resolution_clock::time_point timer2) {
  // total number of seconds as a float
  double time = (std::chrono::duration_cast<std::chrono::duration<double>>(timer2-timer1)).count();
  std::ostringstream ss;
  if(time<60) {
    ss.precision(3);
    ss.setf(std::ios_base::fixed);
    ss << time << " sec";
  }
  else if(time<3600) {
    int m=(int)(time/60.0);
    ss << m << " min ";
    ss.precision(3);
    ss.setf(std::ios_base::fixed);
    ss << time-m*60.0 << " sec"; 
  } else if(time<86400) {
    int h=(int)(time/3600.0);
    int m=(int)(time/60.0-h*60.0);
    ss << h << " h " << m << " min";
  } else {
    int d=(int)(time/86400.0);
    int h=(int)(time/3600.0-d*24.0);
    if(d>1)
      ss << d << " days " << h << " h";
    else
      ss << d << " day " << h << " h";
    ss << " (you must be a patient person)";
  }
  return ss.str();
}

/*
 * Write duration in a friendly format on stdout
 */
void pct(std::chrono::high_resolution_clock::time_point timer1, std::chrono::high_resolution_clock::time_point timer2) {
  std::cout << cct(timer1,timer2);
}


#include "class.cc"

/* rudimentary stob function (bad error handling)*/
bool stob(const std::string s) {
  if(s=="true" || s=="t" || s=="yes") return true;
  if(s=="false" || s=="f" || s=="no") return false;
  std::cerr << "Error : boolean argument " << s << " not recognized, should be lowercase and equal to true, t, yes, false, f or no." << std::endl;
  exit(1);
}

/* Write a "command line syntax" explanation */
void explainSyntax() {
    std::cout << "Syntax: " << "example" <<" [textfiles] [options]\n";
    std::cout << "where the (optional) textfiles contain the" << std::endl << "settings and the (optional) options supersede the ones given in the textfiles" << std::endl;
      std::cout << "  (mandatory settings) ->";
      std::cout << " filename";
    std::cout << std::endl;  
      std::cout << "  (optional settings) ->";
      std::cout << " width";
      std::cout << " height";
    std::cout << std::endl;
    std::cout << "'" << "example" << " --help' for a more detailed description" << std::endl;
    std::cout << "'" << "example" << " --options' for options description" << std::endl;
}

/* describe */
void describe() {
   std::cout << "Description: swirling simply connected set\n\n";
}

/* triggered by --help command line option */
void help() {
    std::cout << "example, ©2009 Arnaud Chéritat\n\n";
    std::cout << "(this program uses the library phpgcc by Arnaud Chéritat)\n\n";
    describe();
    std::cout << "Syntax: " << "example" << " [textfiles] [options]\n";
    std::cout << "  in any order, where textfiles are text files (indeed) containing the\n";
    std::cout << "  settings as a sequence of lines, one for each parameter, of the form\n";
    std::cout << "       name = value\n";
    std::cout << "  and options are command line options, setting the same values, of the form\n";
    std::cout << "       -name value\n";
    std::cout << "  A name shall not be attributed twice, with the following exception:\n";
    std::cout << "  command line options supersede text file options (even text files appearing\n";
    std::cout << "  later in the command line).\n";
    std::cout << "\n";
    std::cout << "Type 'example --options' for a list of parameters\n";
    std::cout << "Type 'example --options --verbose' for a detailed description\n";
    std::cout << std::endl;
}

/* triggered by --options command line option */
void listOptions() {
    describe();
    if(verbose) {
      std::cout << "Parameters description:\n\n";
      std::cout << ". Mandatory arguments:\n\n";
      std::cout << "  filename (string): name of the output image\n";  
      std::cout << "\n";
      std::cout << ". Optional arguments:\n\n";
      std::cout << "  width (int): default value = 600\n";
      std::cout << "    witdh of the image, in pixels\n";

      std::cout << "  height (int): default value = 600\n";
      std::cout << "    height of the image, in pixels\n";

    }
    else {
      std::cout << "Parameters:\n";

      std::cout << "  filename (string, mandatory)\n";

      std::cout << "  width (int, optional)\n";

      std::cout << "  height (int, optional)\n";
  
      std::cout << "\nType 'example --options --verbose' for a detailed description\n";
    }
}

/* Set parameter number "i" to value "value" */
void setParam(int i, const std::string value) {
  switch(i) {
    case 0: { filename = value;
      if(verbose) std::cout << "  filename = " << filename << "\n";
    } break;
    case 1: { width=stoi(value);
      if(verbose) std::cout << "  width = " << width << "\n";
    } break;
    case 2: { height=stoi(value);
      if(verbose) std::cout << "  height = " << height << "\n";
    } break;
    default: {
      std::cerr << "Internal error... setParam(i, value) called with bad i" << std::endl;
      exit(1);
    }
  }
}

/* 
   This is the list of command-lines options, in a format understood by
   the GNU getopt library
 */
const static struct option options[]=
  {
    {"filename", 1, NULL, 0},
    {"width", 1, NULL, 0},
    {"height", 1, NULL, 0},
    {"help", 0, NULL, 0},
    {"verbose", 0, NULL, 0},
    {"version", 0, NULL, 0},
    {"options", 0, NULL, 0},
    {0,0,0,0}
  };
const int HELP_INDEX = paramNumber;
const int VERBOSE_INDEX = paramNumber+1;
const int VERSION_INDEX = paramNumber+2;
const int OPTIONS_INDEX = paramNumber+3;

/* Does parameter number i have a default value ? */
const bool hasDefault[]=
  {
    false,
    true,
    true,
  };

/* What is the default value of parameter number i ? */
const char* defaultValue[]=
  {
    "",
    "600",
    "600",
  };

bool hasMandatoryArguments=true;

void performComputations() {

  // Let's define a few variables

  std::chrono::high_resolution_clock::time_point
    timer1,timer2  // used to chronometerize computation phases
   ,timer3,timer4; // used to chronometerize total

  timer3 = std::chrono::high_resolution_clock::now();
  
  // Now, do the computations



  std::cout << "Precomputations:\n";
  timer1 = std::chrono::high_resolution_clock::now();


  // MainClass ppal; // put it here instead of in phase if you want time the constructor() separately


  timer2 = std::chrono::high_resolution_clock::now();

  // Print computation time

  if(verbose) {
    std::cout << "Precomptations duration: ";
    pct(timer1,timer2);
    std::cout << "\n";
  }


  std::cout << "Computations:\n";

  timer1 = std::chrono::high_resolution_clock::now();


  MainClass ppal;
  ppal.run(); // putting everything in a C++ class is just a matter of 
               // programming style


  timer2 = std::chrono::high_resolution_clock::now();

  // Print computation time

  if(verbose) { 
    std::cout << "Duration: ";
    pct(timer1,timer2);
    std::cout << "\n\n";
  }


  timer4 = std::chrono::high_resolution_clock::now();
  std::cout << "Image computation total duration: ";

  pct(timer3,timer4);
  total_duration_string = duration_string; // copy
  std::cout << "\n";
}

/*
 * A procedure to save a picture
 * and useful information in the metadata (like parameters, time, etc...)
 */
void savePic(std::string fname) {
  std::chrono::high_resolution_clock::time_point timer1,timer2; // to measure save pic duration
  timer1 = std::chrono::high_resolution_clock::now();
  


  std::ofstream file;
  file.open(fname); // text mode!
  if( file.fail() ) {
    // if( (file.rdstate() & std::ifstream::failbit ) != 0 ) {
    std::cerr << "Can't open file" << fname << "\n";
    exit(1);
  };

  // Write file header and save some metadata in it
  file << "%!PS-Adobe EPSF-3.0\n";
  file << "%%BoundingBox: " << bbLeft << " " << bbBottom << " " << bbRight << " " << bbTop << "\n";
  file << "% Software: example.cc ©2009 Arnaud Chéritat\n";
  file << "% Description: swirling simply connected set\n";
  file << "% Parameters:\n";
  std::stringstream s;
  s << "% filename = ";
  s << filename;
  s << "\n";
  s << "% width = ";
  s << width;
  s << "\n";
  s << "% height = ";
  s << height;
  s << "\n";

  file << s.str();
  
  file << "% Command Line arguments";
  for(int i=0;i<Argc;i++) {
    file << " " << Argv[i];
  }
  file << "\n";

  file << ps.str(); // Here we write what the library user has put in the variable ps, of type std::stringstream

  //  file << "showpage\n"; // NO: EPS should --not-- end with showpage

  // Close the file

  file.close();


  timer2 = std::chrono::high_resolution_clock::now();

  if(verbose) {
    std::cout << "Saving picture took: ";
    pct(timer1,timer2);
    std::cout << "\n\n";
  }
}

/*
 * main is the entry point of every C/C++ program
 */ 
int main(int argc, char** argv) {

  Argc=argc; Argv=argv;

  // all the command line argument reading/processing is done in clread.cc
  #include <phpgcc/clread.cc>

  std::chrono::high_resolution_clock::time_point timer1,timer2; // total duration time

  timer1 = std::chrono::high_resolution_clock::now();

  // init  


  performComputations();

  savePic(filename);

  timer2 = std::chrono::high_resolution_clock::now();

  // Print total computation time

  std::cout << "Total Duration: ";
  pct(timer1,timer2);
  std::cout << "\n\n";

  // terminate the program

  return 0;
}
